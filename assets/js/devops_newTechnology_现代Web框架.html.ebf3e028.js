"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[240],{7899:(i,l,e)=>{e.r(l),e.d(l,{comp:()=>t,data:()=>s});var a=e(6254);const n={},t=(0,e(6995).A)(n,[["render",function(i,l){return(0,a.uX)(),(0,a.CE)("div",null,l[0]||(l[0]=[(0,a.Fv)('<h1 id="现代-web-框架" tabindex="-1"><a class="header-anchor" href="#现代-web-框架"><span>现代 Web 框架</span></a></h1><h2 id="_1-react-next" tabindex="-1"><a class="header-anchor" href="#_1-react-next"><span>（1）React + Next</span></a></h2><h2 id="_2-vue-nuxt" tabindex="-1"><a class="header-anchor" href="#_2-vue-nuxt"><span>（2）Vue + Nuxt</span></a></h2><h2 id="_3-solidjs" tabindex="-1"><a class="header-anchor" href="#_3-solidjs"><span>（3）SolidJS</span></a></h2><p><strong>核心特点</strong></p><ul><li>响应式模型借鉴自 Knockout/Signals：使用 fine-grained reactivity（细粒度响应式），编译时优化响应依赖。</li><li>没有虚拟 DOM：直接操作真实 DOM，提升性能。</li><li>编译时优化：模版在构建时被编译成高效的原生 DOM 操作。</li><li>React-like 语法：使用 JSX，看起来很像 React，但运行机制完全不同。</li><li>性能极高：在各种基准测试中经常排在第一或前几。</li></ul><p style="color:red;">直接操作DOM但是性能高的核心原因：细粒度响应式。</p><p><strong>优势</strong></p><ul><li>非常高效，适合性能要求极高的场景。</li><li>学习成本低（尤其是有 React 背景的开发者）。</li><li>小巧、无虚拟 DOM 开销。</li></ul><p><strong>不足</strong></p><ul><li>生态还在成长中，不如 React 完善。</li><li>调试工具和开发者支持相对较少（但正在改善）。</li></ul><h2 id="_4-qwik" tabindex="-1"><a class="header-anchor" href="#_4-qwik"><span>（4）Qwik</span></a></h2><p><strong>核心特点</strong></p><ul><li>以“瞬间启动“（resumability）为核心理念：主打服务器生成应用后，在客户算无需完整加载 JS 就能交互。</li><li>延迟加载一切（Lazy everything）：直到用户交互才按需加载代码。</li><li>适合边缘计算和 SSR 场景：例如 Cloudflare Workers、Vercel Edge Functions。</li><li>使用 JSX 语法，和 React/Solid 类似。</li></ul><p><strong>优势</strong></p><ul><li>近乎“零 JS 启动时间”，非常适合 SEO 和首屏性能关键的应用。</li><li>SSR 和客户端无缝结合。</li><li>能让大型应用“秒开”。</li></ul><p><strong>不足</strong></p><ul><li>更高的学习曲线，尤其是理解 resumability 的概念。</li><li>框架本身更复杂，对开发者心智负担稍大。</li><li>生态尚在发展阶段。</li></ul>',18)]))}]]),s=JSON.parse('{"path":"/devops/newTechnology/%E7%8E%B0%E4%BB%A3Web%E6%A1%86%E6%9E%B6.html","title":"现代 Web 框架","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"（1）React + Next","slug":"_1-react-next","link":"#_1-react-next","children":[]},{"level":2,"title":"（2）Vue + Nuxt","slug":"_2-vue-nuxt","link":"#_2-vue-nuxt","children":[]},{"level":2,"title":"（3）SolidJS","slug":"_3-solidjs","link":"#_3-solidjs","children":[]},{"level":2,"title":"（4）Qwik","slug":"_4-qwik","link":"#_4-qwik","children":[]}],"git":{"updatedTime":1744686703000,"contributors":[{"name":"caiyihong","username":"caiyihong","email":"caiyihong@baidu.com","commits":1,"url":"https://github.com/caiyihong"}],"changelog":[{"hash":"0a448b7166568b78abba694a3808cb11f50ae630","time":1744686703000,"email":"caiyihong@baidu.com","author":"caiyihong","message":"update"}]},"filePathRelative":"devops/newTechnology/现代Web框架.md","excerpt":"\\n<h2>（1）React + Next</h2>\\n<h2>（2）Vue + Nuxt</h2>\\n<h2>（3）SolidJS</h2>\\n<p><strong>核心特点</strong></p>\\n<ul>\\n<li>响应式模型借鉴自 Knockout/Signals：使用 fine-grained reactivity（细粒度响应式），编译时优化响应依赖。</li>\\n<li>没有虚拟 DOM：直接操作真实 DOM，提升性能。</li>\\n<li>编译时优化：模版在构建时被编译成高效的原生 DOM 操作。</li>\\n<li>React-like 语法：使用 JSX，看起来很像 React，但运行机制完全不同。</li>\\n<li>性能极高：在各种基准测试中经常排在第一或前几。</li>\\n</ul>"}')}}]);