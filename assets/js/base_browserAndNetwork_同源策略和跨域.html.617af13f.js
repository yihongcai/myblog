"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[198],{4682:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>t,data:()=>i});var e=s(6254);const l={},t=(0,s(6995).A)(l,[["render",function(a,n){return(0,e.uX)(),(0,e.CE)("div",null,n[0]||(n[0]=[(0,e.Fv)('<h1 id="同源策略和跨域" tabindex="-1"><a class="header-anchor" href="#同源策略和跨域"><span>同源策略和跨域</span></a></h1><h2 id="同源策略" tabindex="-1"><a class="header-anchor" href="#同源策略"><span>同源策略</span></a></h2><p>同源策略（Same-Origin Policy，SOP）是浏览器的安全机制，用于限制不同源页面之间加载资源或访问数据，以防止跨站脚本攻击（XSS）和跨站请求伪造（CSRF）。</p><h3 id="什么是同源" tabindex="-1"><a class="header-anchor" href="#什么是同源"><span>什么是同源</span></a></h3><p>“同源”（Same-Origin）指的是两个 URL 必须具有相同的协议、域名和端口号。</p><h3 id="同源策略的限制" tabindex="-1"><a class="header-anchor" href="#同源策略的限制"><span>同源策略的限制</span></a></h3><ol><li><p>DOM 访问：不同源的页面无法通过 JavaScript 等方式直接访问对方的 DOM 元素。</p></li><li><p>Cookie、LocalStorage、IndexedDB 等存储：不同源的页面无法读取对方的 Cookie、LocalStorage 等数据。</p></li></ol><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>例外情况：可以使用 document.cookie 配置 SameSite=None; Secure 允许跨站访问（如 OAuth 登录）</p></div><ol start="3"><li>AJAX 请求：不同源的页面无法通过 XMLHttpRequest 或 Fetch 发起跨域的 AJAX 请求。</li></ol><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>同源策略只是浏览器的安全策略之一，并非所有的网络请求都受到同源策略的限制。例如，通过<code>&lt;script&gt;</code>标签引入的外部 JavaScript 文件、通过<code>&lt;img&gt;</code>标签加载的图片等资源是不受同源策略限制的。</p><p>此外，一些特定的标记，如<code>&lt;a&gt;</code>标签的 href 属性和<code>&lt;form&gt;</code>标签的 action 属性，也存在一些允许跨域的情况。</p></div><h2 id="跨域解决方案" tabindex="-1"><a class="header-anchor" href="#跨域解决方案"><span>跨域解决方案</span></a></h2><h3 id="jsonp-仅支持-get-请求" tabindex="-1"><a class="header-anchor" href="#jsonp-仅支持-get-请求"><span>JSONP（仅支持 GET 请求）</span></a></h3><p>JSONP 是通过动态创建<code>&lt;script&gt;</code>标签的方式，利用<code>&lt;script&gt;</code>标签可以加载跨域资源的特性来实现的。</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://api.example.com/data?callback=handleData<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>\n<span class="line">  <span class="token keyword">function</span> <span class="token function">handleData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以跨域获取数据</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cors-跨域资源共享" tabindex="-1"><a class="header-anchor" href="#cors-跨域资源共享"><span>CORS（跨域资源共享）</span></a></h3><p>CORS（Cross-Origin Resource Sharing）是一种让浏览器绕过同源策略限制，实现跨域访问资源的机制。</p><p>浏览器在通过 JavaScript 跨域访问资源时，服务器必须明确告知浏览器允许何种请求，只有被服务器端明确允许的请求才能请求成功或被实际发送出去。</p><p>CORS 请求分为简单请求和非简单请求。简单请求需要满足以下条件：</p><ul><li>请求方法是 HEAD、GET、POST；</li><li>HTTP 头信息不超出以下几种字段： <ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type（值为 application/x-www-form-urlencoded、multipart/form-data 或 text/plain）。</li></ul></li></ul><p>如果是非简单请求，浏览器会在正式通信之前，增加一次 HTTP 预检请求（OPTIONS 请求），以确认服务器是否允许跨域请求。</p><p>CORS 具体过程如下：</p><ul><li>浏览器先根据请求方法和请求头信息判断是简单请求还是非简单请求。</li><li>如果是简单请求， <ul><li>浏览器在发起跨域请求时，在请求头中携带 Origin 字段，表明请求的来源。</li><li>服务器接收到请求后，根据 Origin 字段判断是否允许该跨域请求，如果允许，则在响应头中加上对应的允许跨域请求的字段并返回对应的资源。</li><li>浏览器接收到响应后，检查响应头中是否有允许跨域请求的字段，并判断 Origin 是否满足要求。如果满足要求，则让该请求成功；否则，让该请求失败，即使已经正常返回资源也无法访问。</li></ul></li><li>如果是非简单请求， <ul><li>浏览器会在实际请求之前发送一次预检请求（OPTIONS 请求），该请求中会包含一些额外的请求头信息，告诉服务器实际请求中会包含的信息。</li><li>服务器接收到预检请求后，根据请求头中的信息以及服务端配置的允许跨域的响应头信息判断是否允许实际请求。如果允许则在响应头中加上对应的允许跨域请求的字段。</li><li>浏览器接收到预检请求的响应后，如果响应头中包含允许跨域请求的字段，则继续发送实际请求；否则，让该请求失败。</li></ul></li></ul><p>客户端字段</p><ol><li>Origin：表示请求的来源。</li><li>withCredentials：表示是否允许跨域携带 Cookie。</li><li>Access-Control-Request-Method：表示请求的方法 Method。</li><li>Access-Control-Request-Headers：表示请求头中的额外信息。</li></ol><p>服务端字段</p><ol><li>Access-Control-Allow-Origin：表示允许访问该资源的域名，可以设置为<code>*</code>表示任何域名都可以访问。</li><li>Access-Control-Allow-Crendentials：表示是否允许浏览器携带 Cookie 和认真信息等，默认为 false。</li><li>Access-Control-Allow-Methods：表示允许的请求方法，可以设置为<code>GET, POST, PUT, DELETE</code>等。</li><li>Access-Control-Max-Age：表示预检请求的缓存时间，单位为秒。</li></ol><h3 id="postmessage" tabindex="-1"><a class="header-anchor" href="#postmessage"><span>postMessage</span></a></h3><p>postMessage 是 HTML5 提供的一种跨窗口通信机制，可以在不同窗口、甚至不同域名之间进行通信，不受同源策略限制。</p><h3 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h3><p>WebSocket 可以实现客户端和服务器端之间的实时双向通信，同时也可以跨域通信。</p><p>WebSocket 协议建立在 TCP 协议之上，通过 HTTP 协议发起握手请求，建立连接后，通信双方可以随时发送数据，不受同源策略的限制。</p><h3 id="代理服务器" tabindex="-1"><a class="header-anchor" href="#代理服务器"><span>代理服务器</span></a></h3><p>通过代理服务器转发请求，实现跨域访问。</p>',33)]))}]]),i=JSON.parse('{"path":"/base/browserAndNetwork/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%92%8C%E8%B7%A8%E5%9F%9F.html","title":"同源策略和跨域","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"同源策略","slug":"同源策略","link":"#同源策略","children":[{"level":3,"title":"什么是同源","slug":"什么是同源","link":"#什么是同源","children":[]},{"level":3,"title":"同源策略的限制","slug":"同源策略的限制","link":"#同源策略的限制","children":[]}]},{"level":2,"title":"跨域解决方案","slug":"跨域解决方案","link":"#跨域解决方案","children":[{"level":3,"title":"JSONP（仅支持 GET 请求）","slug":"jsonp-仅支持-get-请求","link":"#jsonp-仅支持-get-请求","children":[]},{"level":3,"title":"CORS（跨域资源共享）","slug":"cors-跨域资源共享","link":"#cors-跨域资源共享","children":[]},{"level":3,"title":"postMessage","slug":"postmessage","link":"#postmessage","children":[]},{"level":3,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[]},{"level":3,"title":"代理服务器","slug":"代理服务器","link":"#代理服务器","children":[]}]}],"git":{"updatedTime":1743355800000,"contributors":[{"name":"caiyihong","username":"caiyihong","email":"caiyihong@baidu.com","commits":1,"url":"https://github.com/caiyihong"}],"changelog":[{"hash":"bb6aac5297cfaca464b5ad9ec20ea7f2c789468b","time":1743355800000,"email":"caiyihong@baidu.com","author":"caiyihong","message":"同源策略和跨域"}]},"filePathRelative":"base/browserAndNetwork/同源策略和跨域.md","excerpt":"\\n<h2>同源策略</h2>\\n<p>同源策略（Same-Origin Policy，SOP）是浏览器的安全机制，用于限制不同源页面之间加载资源或访问数据，以防止跨站脚本攻击（XSS）和跨站请求伪造（CSRF）。</p>\\n<h3>什么是同源</h3>\\n<p>“同源”（Same-Origin）指的是两个 URL 必须具有相同的协议、域名和端口号。</p>\\n<h3>同源策略的限制</h3>\\n<ol>\\n<li>\\n<p>DOM 访问：不同源的页面无法通过 JavaScript 等方式直接访问对方的 DOM 元素。</p>\\n</li>\\n<li>\\n<p>Cookie、LocalStorage、IndexedDB 等存储：不同源的页面无法读取对方的 Cookie、LocalStorage 等数据。</p>\\n</li>\\n</ol>"}')}}]);