"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[524],{594:(n,s,a)=>{a.d(s,{U:()=>e});const e=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]}},"timeline":{"/":{"path":"/timeline/","indexes":[]}}}')},2798:(n,s,a)=>{a.d(s,{l:()=>e});const e=JSON.parse('{"category":{"/":{"path":"/category/","map":{}}},"tag":{"/":{"path":"/tag/","map":{}}}}')},6159:(n,s,a)=>{a.d(s,{J:()=>t,c:()=>e});const e=JSON.parse("{}"),t=Object.fromEntries([["/",{loader:()=>a.e(470).then(a.bind(a,5824)),meta:{title:"Home"}}],["/get-started.html",{loader:()=>a.e(642).then(a.bind(a,868)),meta:{_blog:{title:"Get Started",author:"",date:null,category:[],tag:[],excerpt:'\n<p>This is a normal page, which contains VuePress basics.</p>\n<h2>Pages</h2>\n<p>You can add markdown files in your vuepress directory, every markdown file will be converted to a page in your site.</p>\n<p>See <a href="https://vuejs.press/guide/page.html#routing" target="_blank" rel="noopener noreferrer">routing</a> for more details.</p>'},title:"Get Started"}}],["/ai/",{loader:()=>a.e(25).then(a.bind(a,9727)),meta:{_blog:{title:"AI IDE",author:"",date:null,category:[],tag:[],excerpt:'\n<blockquote>\n<p><a href="https://juejin.cn/post/7475960553028009999" target="_blank" rel="noopener noreferrer">Trae 和 Cursor 小斗法</a></p>\n<p><a href="https://juejin.cn/post/7463397212120973375" target="_blank" rel="noopener noreferrer">有了 Trae，人人都是程序员的时代来了</a></p>\n</blockquote>\n<h2>Cursor</h2>\n<p><a href="https://www.cursor.com/cn" target="_blank" rel="noopener noreferrer">Cursor 下载地址</a></p>'},title:"AI IDE"}}],["/base/",{loader:()=>a.e(70).then(a.bind(a,7192)),meta:{_blog:{title:"闭包",author:"",date:null,category:[],tag:[],excerpt:'\n<h2>闭包的定义</h2>\n<p>在 JavaScript 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中的变量。</p>\n<p>当调用一个外部函数返回的内部函数时，就是该外部函数已经执行结束了，但是内部函数访问外部函数中的变量仍然保存在内部函数的作用域链中，我们把这些变量的集合称为闭包 Closure。</p>\n<p>闭包的代码示例：</p>\n<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">\'Mozilla\'</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token keyword">return</span> displayName<span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token keyword">const</span> myFunc <span class="token operator">=</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>'},title:"闭包"}}],["/code/",{loader:()=>a.e(738).then(a.bind(a,8511)),meta:{_blog:{title:"",author:"",date:null,category:[],tag:[],excerpt:""},title:""}}],["/devops/",{loader:()=>a.e(438).then(a.bind(a,9834)),meta:{_blog:{title:"性能优化方案",author:"",date:null,category:[],tag:[],excerpt:"\n<p>代码分割 减少初始加载时间</p>\n<p>React Server Components：减少前端 JavaScript 体积</p>\n<p>Streaming SSR：服务器端流式渲染，提高首屏加载速度</p>\n<p>Tailwind JIT：只编译使用的 CSS，减少 CSS 体积</p>\n<p>AVIF / WebP：新图片格式，减少资源大小</p>\n<p>HTTP/3 + QUIC：加快网络请求速度</p>\n<p>Edge Computing CDN + 服务器边缘计算，减少延迟</p>\n<p>AI 代码优化：AI 提供智能优化建议</p>\n"},title:"性能优化方案"}}],["/framework/",{loader:()=>a.e(573).then(a.bind(a,4460)),meta:{_blog:{title:"",author:"",date:null,category:[],tag:[],excerpt:""},title:""}}],["/native/",{loader:()=>a.e(972).then(a.bind(a,1388)),meta:{_blog:{title:"小程序架构",author:"",date:null,category:[],tag:[],excerpt:'\n<h2>双线程架构</h2>\n<p>小程序为双线程架构模型，渲染层和逻辑层分别由两个线程管理。渲染层使用 webview 渲染，逻辑层采用 jsCore 运行 javascript 代码。</p>\n<p>小程序的架构图如下：\n\n从图中可以看出，由于逻辑层和渲染层分开，一个小程序有多个界面，所以渲染层对应存在多个 webview。这两个线程之间的通信由 native 层进行统一处理。<span style="color:red;">无论是线程之间的通讯、数据的传递、网络请求都由 native 层做转发。</span></p>\n<p>逻辑层、渲染层和 native 层负责的功能如下：</p>\n<ul>\n<li>逻辑层：创建了一个单独的线程去执行 javascript，在这个环境下执行的都是小程序业务逻辑相关的代码。</li>\n<li>渲染层：界面渲染相关的任务全都在 webview 线程中执行，通过逻辑层代码去控制渲染哪些页面。一个小程序存在多个界面，所以渲染层存在多个 webview 线程。</li>\n<li>native 层：逻辑层和渲染层之间的通信会经由微信客户端（native）做中转，逻辑层发送网络请求也经由 native 转发。</li>\n</ul>'},title:"小程序架构"}}],["/base/browserAndNetwork/V8%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html",{loader:()=>a.e(431).then(a.bind(a,2013)),meta:{_blog:{title:"V8 的垃圾回收机制",author:"",date:null,category:[],tag:[],excerpt:"\n<p>JavaScript 中的数据存储分为堆存储和栈存储。堆存储用于存储对象，栈存储用于存储基本类型的数据。</p>\n<p>V8 引擎的垃圾回收机制主要针对堆存储进行管理。</p>\n<h2>栈的垃圾回收机制</h2>\n<p>栈通过移动 ESP 指针（记录当前执行位置的指针）实现内存管理。</p>\n<p>在执行栈中，当函数执行结束后，JS 引擎通过向下移动 ESP 指针来销毁函数保存在栈中的执行上下文。</p>\n<h2>堆的垃圾回收机制（Garbage Collection， GC）</h2>\n<p>V8 引擎将对象存储在堆（Heap）中，并将堆划分为新生代和老生代，分别使用不同的 GC 策略。</p>"},title:"V8 的垃圾回收机制"}}],["/base/browserAndNetwork/",{loader:()=>a.e(784).then(a.bind(a,7082)),meta:{_blog:{title:"从输入 url 回车到页面展示中间发生了什么",author:"",date:null,category:[],tag:[],excerpt:"\n"},title:"从输入 url 回车到页面展示中间发生了什么"}}],["/base/browserAndNetwork/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%92%8C%E8%B7%A8%E5%9F%9F.html",{loader:()=>a.e(198).then(a.bind(a,3774)),meta:{_blog:{title:"同源策略和跨域",author:"",date:null,category:[],tag:[],excerpt:"\n<h2>同源策略</h2>\n<p>同源策略（Same-Origin Policy，SOP）是浏览器的安全机制，用于限制不同源页面之间加载资源或访问数据，以防止跨站脚本攻击（XSS）和跨站请求伪造（CSRF）。</p>\n<h3>什么是同源</h3>\n<p>“同源”（Same-Origin）指的是两个 URL 必须具有相同的协议、域名和端口号。</p>\n<h3>同源策略的限制</h3>\n<ol>\n<li>\n<p>DOM 访问：不同源的页面无法通过 JavaScript 等方式直接访问对方的 DOM 元素。</p>\n</li>\n<li>\n<p>Cookie、LocalStorage、IndexedDB 等存储：不同源的页面无法读取对方的 Cookie、LocalStorage 等数据。</p>\n</li>\n</ol>"},title:"同源策略和跨域"}}],["/base/browserAndNetwork/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html",{loader:()=>a.e(62).then(a.bind(a,6657)),meta:{_blog:{title:"浏览器缓存机制",author:"",date:null,category:[],tag:[],excerpt:"\n"},title:"浏览器缓存机制"}}],["/base/browserAndNetwork/%E8%B7%A8%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%80%9A%E4%BF%A1.html",{loader:()=>a.e(175).then(a.bind(a,2187)),meta:{_blog:{title:"跨标签页通信",author:"",date:null,category:[],tag:[],excerpt:"\n<p>在 Web 开发中，跨标签页通信是指在不同的浏览器标签页（或窗口）之间共享数据或传递消息。这里总结几种常用的跨标签页通信方式。</p>\n<h2>同源页面通信</h2>\n<p>对于同源页面，常见的页面通信方式包括以下几种：</p>\n<ul>\n<li>\n<p>广播模式：BroadcastChannel、Service Worker、localStorage + storageEvent</p>\n</li>\n<li>\n<p>共享存储模式：Shared Worker、IndexedDB、cookie</p>\n</li>\n<li>\n<p>口口相传模式：window.open + window.opener</p>\n</li>\n</ul>"},title:"跨标签页通信"}}],["/base/javascript/this%E6%8C%87%E5%90%91.html",{loader:()=>a.e(110).then(a.bind(a,9829)),meta:{_blog:{title:"this 指向",author:"",date:null,category:[],tag:[],excerpt:"\n<p>由于 this 是和执行上下文绑定的，所以 this 也分为全局执行上下文中的 this 和函数执行上下文中的 this。</p>\n<h2>全局执行上下文中的 this</h2>\n<p>全局执行上下文中的 this 一般指向 window，严格模式下指向 undefined。</p>\n<h2>函数执行上下文中的 this</h2>\n<p>函数执行上下文中的 this 根据函数调用方式的不同而不同。具体分为以下几种情况：</p>\n<p>1.作为函数被调用，this 指向全局 window。</p>\n<p>2.作为对象属性被调用，this 执行该对象。</p>\n<p>3.作为构造函数被调用，this 指向当前实例对象。</p>"},title:"this 指向"}}],["/base/javascript/typeof%E5%92%8Cinstanceof.html",{loader:()=>a.e(701).then(a.bind(a,4726)),meta:{_blog:{title:"typeof 和 instanceof",author:"",date:null,category:[],tag:[],excerpt:"\n"},title:"typeof 和 instanceof"}}],["/base/javascript/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.html",{loader:()=>a.e(495).then(a.bind(a,1453)),meta:{_blog:{title:"作用域链",author:"",date:null,category:[],tag:[],excerpt:"\n"},title:"作用域链"}}],["/base/javascript/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html",{loader:()=>a.e(260).then(a.bind(a,930)),meta:{_blog:{title:"函数柯里化",author:"",date:null,category:[],tag:[],excerpt:"\n"},title:"函数柯里化"}}],["/base/javascript/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE.html",{loader:()=>a.e(740).then(a.bind(a,784)),meta:{_blog:{title:"原型和原型链",author:"",date:null,category:[],tag:[],excerpt:"\n"},title:"原型和原型链"}}],["/base/javascript/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E6%A1%88.html",{loader:()=>a.e(749).then(a.bind(a,9495)),meta:{_blog:{title:"异步编程方案",author:"",date:null,category:[],tag:[],excerpt:'\n<p>在 JavaScript 中，异步编程是核心特征之一，主要用于处理 I/O 操作、网络请求、定时器等任务。常见的 JS 异步方案有以下几种：</p>\n<h2>回调函数（Callback）</h2>\n<h2>Promise</h2>\n<p>（1）具体实现（PromiseA+ 规范）</p>\n<details class="hint-container details"><summary>Promise 具体实现</summary>\n<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>\n<span class="line"> * PromiseA+ 规范</span>\n<span class="line"> * 1. Promise状态必须是以下三种状态之一：等待中（pending）、已完成（fulfilled）、已拒绝（rejected）</span>\n<span class="line"> * 2. 一个Promise对象必须提供一个then方法去访问当前</span>\n<span class="line"> */</span></span>\n<span class="line"><span class="token keyword">const</span> Status <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token constant">PENDING</span><span class="token operator">:</span> <span class="token string">\'pending\'</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token constant">FULFILLED</span><span class="token operator">:</span> <span class="token string">\'fulfilled\'</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token constant">REJECTED</span><span class="token operator">:</span> <span class="token string">\'rejected\'</span><span class="token punctuation">,</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Status<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token function">executor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Status<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span></span>\n<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Status<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span></span>\n<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onfulfilled<span class="token punctuation">,</span> onrejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">let</span> ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Status<span class="token punctuation">.</span><span class="token constant">FULFILLED</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Status<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>\n<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Status<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            ref <span class="token operator">=</span> <span class="token function">onfulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">            ref <span class="token operator">=</span> <span class="token function">onrejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">          <span class="token punctuation">}</span></span>\n<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">              <span class="token keyword">if</span> <span class="token punctuation">(</span></span>\n<span class="line">                ref<span class="token punctuation">.</span>status <span class="token operator">===</span> Status<span class="token punctuation">.</span><span class="token constant">FULFILLED</span> <span class="token operator">||</span></span>\n<span class="line">                ref<span class="token punctuation">.</span>status <span class="token operator">===</span> Status<span class="token punctuation">.</span><span class="token constant">REJECTED</span></span>\n<span class="line">              <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                res<span class="token punctuation">.</span>status <span class="token operator">=</span> ref<span class="token punctuation">.</span>status<span class="token punctuation">;</span></span>\n<span class="line">                res<span class="token punctuation">.</span>value <span class="token operator">=</span> ref<span class="token punctuation">.</span>value<span class="token punctuation">;</span></span>\n<span class="line">                res<span class="token punctuation">.</span>reason <span class="token operator">=</span> ref<span class="token punctuation">.</span>reason<span class="token punctuation">;</span></span>\n<span class="line">              <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token comment">// onfulfilled或onrejected没有返回值 或 返回值不是promise</span></span>\n<span class="line">            res<span class="token punctuation">.</span>status <span class="token operator">=</span> Status<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span></span>\n<span class="line">            res<span class="token punctuation">.</span>reason <span class="token operator">=</span> ref<span class="token punctuation">;</span></span>\n<span class="line">          <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">          res<span class="token punctuation">.</span>status <span class="token operator">=</span> Status<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span></span>\n<span class="line">          res<span class="token punctuation">.</span>reason <span class="token operator">=</span> error<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">      <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> res<span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>'},title:"异步编程方案"}}],["/base/javascript/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html",{loader:()=>a.e(262).then(a.bind(a,6039)),meta:{_blog:{title:"箭头函数",author:"",date:null,category:[],tag:[],excerpt:"\n"},title:"箭头函数"}}],["/base/javascript/%E7%BB%A7%E6%89%BF.html",{loader:()=>a.e(732).then(a.bind(a,2612)),meta:{_blog:{title:"继承",author:"",date:null,category:[],tag:[],excerpt:"\n"},title:"继承"}}],["/code/leetcode/",{loader:()=>a.e(968).then(a.bind(a,8718)),meta:{_blog:{title:"",author:"",date:null,category:[],tag:[],excerpt:"<p>Leetcode</p>\n"},title:""}}],["/code/leetcode/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2.html",{loader:()=>a.e(803).then(a.bind(a,8615)),meta:{_blog:{title:"数组和字符串",author:"",date:null,category:[],tag:[],excerpt:"\n"},title:"数组和字符串"}}],["/code/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.html",{loader:()=>a.e(145).then(a.bind(a,8046)),meta:{_blog:{title:"滑动窗口",author:"",date:null,category:[],tag:[],excerpt:'\n<h2>76.最小覆盖子串 </h2>\n<p><a href="https://leetcode.cn/problems/minimum-window-substring/description/" target="_blank" rel="noopener noreferrer">Leetcode 地址</a></p>\n<p>题目描述：给你一个字符串<code>s</code>、一个字符串<code>t</code> 。返回<code>s</code>中涵盖<code>t</code>所有字符的最小子串。如果<code>s</code>中不存在涵盖<code>t</code>所有字符的子串，则返回空字符串<code>""</code> 。</p>'},title:"滑动窗口"}}],["/code/programme/",{loader:()=>a.e(439).then(a.bind(a,7992)),meta:{_blog:{title:"",author:"",date:null,category:[],tag:[],excerpt:"<p>算法编程</p>\n"},title:""}}],["/devops/newTechnology/",{loader:()=>a.e(877).then(a.bind(a,3899)),meta:{_blog:{title:"前端最新技术",author:"",date:null,category:[],tag:[],excerpt:"\n<h2>(1) 现代 Web 框架</h2>\n<ul>\n<li>React 18 + Next.js 13/14：引入 React Server Components (RSC)，提升 SSR 性能</li>\n<li>Vue 3 + Nuxt 3：Composition API 更强大，支持 Vue SSR + Edge Computing</li>\n<li>Solid.js / Qwik：更高效的前端框架，优化渲染性能</li>\n</ul>\n<h2>(2) 现代 Web 服务器（NodeJS）</h2>\n<ul>\n<li>Bun：比 Node.js 更快的新 JS 运行时（内置 Web 服务器）</li>\n<li>Deno：默认支持 TypeScript，安全性更高</li>\n<li>Rust + Axum / Actix：超高性能后端框架</li>\n</ul>"},title:"前端最新技术"}}],["/devops/newTechnology/%E7%8E%B0%E4%BB%A3Web%E6%9C%8D%E5%8A%A1%E5%99%A8.html",{loader:()=>a.e(468).then(a.bind(a,5228)),meta:{_blog:{title:"现代 Web 服务器",author:"",date:null,category:[],tag:[],excerpt:'\n<h2>（1）Bun</h2>\n<h2>（2）Deno</h2>\n<p>Deno 是一个由 Node.js 创始人 Ryan Dahl 重新打造的 JavaScript/TypeScript 运行时，目标是弥补他在设计 Node.js 的“悔恨”。</p>\n<div class="hint-container tip">\n<p class="hint-container-title">Tips</p>\n<p>一句话解释：Deno = 更现代、更安全、更简单的 Node.js 替代品。</p>\n</div>\n<p><strong>Deno 特性</strong></p>\n<ul>\n<li>用 Rust 编写，性能强劲。</li>\n<li>原生支持 JavaScript 和 TypeScript。</li>\n<li>默认无权限访问文件/网络，需手动开启（类似沙箱）。</li>\n<li>内建工具链：自带 formatter、linter、test runner、bundler 等。</li>\n<li>类似浏览器环境，支持 fetch、Request、Response 等。</li>\n<li>模块系统：没有 node_modules，直接通过 URL 引入模块。</li>\n<li>无需 webpack、babel，简洁直接运行代码。</li>\n</ul>'},title:"现代 Web 服务器"}}],["/devops/newTechnology/%E7%8E%B0%E4%BB%A3Web%E6%A1%86%E6%9E%B6.html",{loader:()=>a.e(240).then(a.bind(a,7899)),meta:{_blog:{title:"现代 Web 框架",author:"",date:null,category:[],tag:[],excerpt:"\n<h2>（1）React + Next</h2>\n<h2>（2）Vue + Nuxt</h2>\n<h2>（3）SolidJS</h2>\n<p><strong>核心特点</strong></p>\n<ul>\n<li>响应式模型借鉴自 Knockout/Signals：使用 fine-grained reactivity（细粒度响应式），编译时优化响应依赖。</li>\n<li>没有虚拟 DOM：直接操作真实 DOM，提升性能。</li>\n<li>编译时优化：模版在构建时被编译成高效的原生 DOM 操作。</li>\n<li>React-like 语法：使用 JSX，看起来很像 React，但运行机制完全不同。</li>\n<li>性能极高：在各种基准测试中经常排在第一或前几。</li>\n</ul>"},title:"现代 Web 框架"}}],["/framework/react/",{loader:()=>a.e(565).then(a.bind(a,5525)),meta:{_blog:{title:"基础",author:"",date:null,category:[],tag:[],excerpt:"\n<h2>1.React 组件之间的通信方式</h2>\n<h2>2.组件的生命周期</h2>\n<h2>3.React Context</h2>\n<h2>4.高阶组件（HOC）</h2>\n<h2>5.React 如何避免不必要的渲染</h2>\n<h3>React 渲染控制的方式</h3>\n<p>React 渲染控制的方式可以分为以下几类：</p>\n<ul>\n<li>从父组件直接隔断子组件的渲染，如缓存 React.element 对象、React.useMemo。</li>\n<li>组件内部控制是否渲染，如 PureComponent、shouldComponentUpdate、React.memo。</li>\n<li>打破渲染限制，如 forceUpdate、context 穿透。</li>\n</ul>"},title:"基础"}}],["/framework/vue/",{loader:()=>a.e(42).then(a.bind(a,1828)),meta:{_blog:{title:"基础",author:"",date:null,category:[],tag:[],excerpt:'\n<h2>1.Vue 组件之间的通信方式有哪些</h2>\n<h2>2.Vue2 的响应式原理</h2>\n<h2>3.虚拟 DOM</h2>\n<p>虚拟 DOM 本质上是 JavaScript 对象，是真实 DOM 的描述，用一个 JavaScript 对象来描述一个 DOM 节点。</p>\n<p>虚拟 DOM 可以看作是一棵模拟 DOM 树的 JavaScript 树，主要通过 VNode 实现一个无状态的组件，当组件状态变更时，通过新旧虚拟 DOM 的对比，再对真实的 DOM 进行更新。<span style="color:red;">虚拟 DOM 说白了就是以 js 的计算性能来换取操作真实 DOM 所消耗的性能。</span></p>'},title:"基础"}}],["/404.html",{loader:()=>a.e(490).then(a.bind(a,3930)),meta:{title:""}}],["/category/",{loader:()=>a.e(583).then(a.bind(a,7422)),meta:{title:"Categories"}}],["/tag/",{loader:()=>a.e(797).then(a.bind(a,6539)),meta:{title:"Tags"}}],["/article/",{loader:()=>a.e(511).then(a.bind(a,1586)),meta:{title:"Articles"}}],["/timeline/",{loader:()=>a.e(464).then(a.bind(a,1688)),meta:{title:"Timeline"}}]])},8120:(n,s,a)=>{a.d(s,{K:()=>e});const e=JSON.parse('{"logo":"https://vuejs.press/images/hero.png","navbar":["/",{"text":"前端基础","link":"/base/"},{"text":"前端框架","link":"/framework/"},{"text":"前端工程化","link":"/devops/"},{"text":"跨端","link":"/native/"},{"text":"算法编程","link":"/code/"},{"text":"AI","link":"/ai/"},{"text":"Github","link":"https://github.com/yihongcai/myblog"}],"sidebarDepth":2,"sidebar":{"/base/":[{"text":"JavaScript基础","link":"/base/javascript/","sidebarDepth":1,"collapsible":false,"children":["","javascript/函数柯里化","javascript/this指向","javascript/作用域链","javascript/原型和原型链","javascript/继承","javascript/箭头函数","javascript/异步编程方案"]},{"text":"浏览器和网络","link":"/base/browserAndNetwork/","sidebarDepth":1,"collapsible":false,"children":["browserAndNetwork/","browserAndNetwork/跨标签页通信","browserAndNetwork/浏览器缓存机制","browserAndNetwork/V8的垃圾回收机制","browserAndNetwork/同源策略和跨域"]}],"/framework/":[{"text":"前端框架","link":"/framework/"},{"text":"Vue篇","link":"/framework/vue/","sidebarDepth":1,"collapsible":false},{"text":"React篇","link":"/framework/react/","sidebarDepth":1,"collapsible":false}],"/devops/":[{"text":"性能优化","link":"/devops/performance/","sidebarDepth":1,"collapsible":false,"children":[""]},{"text":"前端最新技术","link":"/devops/newTechnology/","sidebarDepth":1,"collapsible":false,"children":["/devops/newTechnology/","/devops/newTechnology/现代Web框架","/devops/newTechnology/现代Web服务器"]}],"/native/":[{"text":"小程序","link":"/native/miniProgram/","sidebarDepth":1,"collapsible":false,"children":[""]}],"/code/":[{"text":"Leetcode","link":"/code/leetcode/","sidebarDepth":1,"collapsible":false,"children":["/code/leetcode/数组和字符串","/code/leetcode/滑动窗口"]},{"text":"算法编程","link":"/code/programme/","sidebarDepth":1,"collapsible":false,"children":[]}],"/ai/":[""]},"locales":{"/":{"selectLanguageName":"English"}},"colorMode":"auto","colorModeSwitch":true,"repo":null,"selectLanguageText":"Languages","selectLanguageAriaLabel":"Select language","editLink":true,"editLinkText":"Edit this page","lastUpdated":true,"contributors":true,"contributorsText":"Contributors","notFound":["There\'s nothing here.","How did we get here?","That\'s a Four-Oh-Four.","Looks like we\'ve got some broken links."],"backToHome":"Take me home","openInNewWindow":"open in new window","toggleColorMode":"toggle color mode","toggleSidebar":"toggle sidebar"}')},8589:(n,s,a)=>{a.d(s,{M:()=>e});const e=JSON.parse('["/get-started.html","/ai/","/base/","/code/","/devops/","/framework/","/native/","/base/browserAndNetwork/V8%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html","/base/browserAndNetwork/","/base/browserAndNetwork/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%92%8C%E8%B7%A8%E5%9F%9F.html","/base/browserAndNetwork/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html","/base/browserAndNetwork/%E8%B7%A8%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%80%9A%E4%BF%A1.html","/base/javascript/this%E6%8C%87%E5%90%91.html","/base/javascript/typeof%E5%92%8Cinstanceof.html","/base/javascript/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.html","/base/javascript/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html","/base/javascript/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE.html","/base/javascript/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E6%A1%88.html","/base/javascript/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html","/base/javascript/%E7%BB%A7%E6%89%BF.html","/code/leetcode/","/code/leetcode/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2.html","/code/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.html","/code/programme/","/devops/newTechnology/","/devops/newTechnology/%E7%8E%B0%E4%BB%A3Web%E6%9C%8D%E5%8A%A1%E5%99%A8.html","/devops/newTechnology/%E7%8E%B0%E4%BB%A3Web%E6%A1%86%E6%9E%B6.html","/framework/react/","/framework/vue/"]')},9019:(n,s,a)=>{a.d(s,{B:()=>Z});var e={};a.r(e),a.d(e,{default:()=>k});var t={};a.r(t),a.d(t,{default:()=>b});var p={};a.r(p),a.d(p,{default:()=>y});var l={};a.r(l),a.d(l,{default:()=>Y});var o=a(5053),i=a(9429),c=a(9455),r=a(7751),u=a(3200),d=a(9210);const k={enhance:({app:n})=>{n.component("GitContributors",u.B),n.component("GitChangelog",d.D)}};var m=a(8517),v=a(7013),h=a(2540);const b={setup(){(0,h._)()}};var g=a(1015),E=a(7518);const y={enhance:({app:n})=>{n.component("CodeTabs",g.S),n.component("Tabs",E.t)}};var w=a(6459),A=a(956),f=a(4469),B=a(6254),C=a(5598),S=a(3341),D=a(7590),x=a(8627);const _={class:"article-wrapper"},j={key:0},F=["onClick"],T={class:"title"},L={class:"article-info"},R={key:0,class:"author"},N={key:1,class:"date"},O={key:2,class:"category"},I={key:3,class:"tag"},J=["innerHTML"],W={__name:"ArticleList",props:{items:{type:Array,required:!0},isTimeline:Boolean},setup:n=>(s,a)=>((0,B.uX)(),(0,B.CE)("div",_,[n.items.length?(0,B.Q3)("",!0):((0,B.uX)(),(0,B.CE)("div",j,"Nothing in here.")),((0,B.uX)(!0),(0,B.CE)(B.FK,null,(0,B.pI)(n.items,(({info:e,path:t})=>((0,B.uX)(),(0,B.CE)("article",{key:t,class:"article",onClick:n=>s.$router.push(t)},[(0,B.Lk)("header",T,(0,x.v_)((n.isTimeline?`${new Date(e.date).toLocaleDateString()}: `:"")+e.title),1),a[0]||(a[0]=(0,B.Lk)("hr",null,null,-1)),(0,B.Lk)("div",L,[e.author?((0,B.uX)(),(0,B.CE)("span",R,"Author: "+(0,x.v_)(e.author),1)):(0,B.Q3)("",!0),e.date&&!n.isTimeline?((0,B.uX)(),(0,B.CE)("span",N,"Date: "+(0,x.v_)(new Date(e.date).toLocaleDateString()),1)):(0,B.Q3)("",!0),e.category?((0,B.uX)(),(0,B.CE)("span",O,"Category: "+(0,x.v_)(e.category.join(", ")),1)):(0,B.Q3)("",!0),e.tag?((0,B.uX)(),(0,B.CE)("span",I,"Tag: "+(0,x.v_)(e.tag.join(", ")),1)):(0,B.Q3)("",!0)]),e.excerpt?((0,B.uX)(),(0,B.CE)("div",{key:0,class:"excerpt",innerHTML:e.excerpt},null,8,J)):(0,B.Q3)("",!0)],8,F)))),128))]))},M={class:"page"},P={__name:"Article",setup(n){const s=(0,S.Om)("article");return(n,a)=>((0,B.uX)(),(0,B.Wv)(D.A,null,{page:(0,B.k6)((()=>[(0,B.Lk)("main",M,[(0,B.bF)(W,{items:(0,C.R1)(s).items},null,8,["items"])])])),_:1}))}},X={class:"page"},V={class:"category-wrapper"},U={class:"category-num"},G={__name:"Category",setup(n){const s=(0,S.es)("category"),a=(0,f.AQ)();return(n,e)=>((0,B.uX)(),(0,B.Wv)(D.A,null,{page:(0,B.k6)((()=>[(0,B.Lk)("main",X,[(0,B.Lk)("div",V,[((0,B.uX)(!0),(0,B.CE)(B.FK,null,(0,B.pI)((0,C.R1)(s).map,(({items:n,path:s},e)=>((0,B.uX)(),(0,B.Wv)((0,C.R1)(f.Wt),{key:e,to:s,active:(0,C.R1)(a)===s,class:"category"},{default:(0,B.k6)((()=>[(0,B.eW)((0,x.v_)(e)+" ",1),(0,B.Lk)("span",U,(0,x.v_)(n.length),1)])),_:2},1032,["to","active"])))),128))]),(0,B.bF)(W,{items:(0,C.R1)(s).currentItems??[]},null,8,["items"])])])),_:1}))}},Q={class:"page"},H={class:"tag-wrapper"},K={class:"tag-num"},q={__name:"Tag",setup(n){const s=(0,S.es)("tag"),a=(0,f.AQ)();return(n,e)=>((0,B.uX)(),(0,B.Wv)(D.A,null,{page:(0,B.k6)((()=>[(0,B.Lk)("main",Q,[(0,B.Lk)("div",H,[((0,B.uX)(!0),(0,B.CE)(B.FK,null,(0,B.pI)((0,C.R1)(s).map,(({items:n,path:s},e)=>((0,B.uX)(),(0,B.Wv)((0,C.R1)(f.Wt),{key:e,to:s,active:(0,C.R1)(a)===s,class:"tag"},{default:(0,B.k6)((()=>[(0,B.eW)((0,x.v_)(e)+" ",1),(0,B.Lk)("span",K,(0,x.v_)(n.length),1)])),_:2},1032,["to","active"])))),128))]),(0,B.bF)(W,{items:(0,C.R1)(s).currentItems??[]},null,8,["items"])])])),_:1}))}},$={class:"page"},z={__name:"Timeline",setup(n){const s=(0,S.Om)("timeline");return(n,a)=>((0,B.uX)(),(0,B.Wv)(D.A,null,{page:(0,B.k6)((()=>[(0,B.Lk)("main",$,[a[0]||(a[0]=(0,B.Lk)("h1",{class:"timeline-title"},"Timeline",-1)),(0,B.bF)(W,{items:(0,C.R1)(s).items,"is-timeline":""},null,8,["items"])])])),_:1}))}},Y=(0,f.re)({layouts:{Article:P,Category:G,Tag:q,Timeline:z}}),Z=[o,i,c,r,e,m,v,t,p,w,A,l].map((n=>n.default)).filter(Boolean)},9354:(n,s,a)=>{a.d(s,{U:()=>e});const e=JSON.parse('{"base":"/myblog/","lang":"en-US","title":"VuePress","description":"My first VuePress Site","head":[],"locales":{}}')}},n=>{n.O(0,[646,399],(()=>n(n.s=3160))),n.O()}]);